---
# yamllint disable rule:line-length
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-tekton-dashboard
spec:
  params:
    - name: versionTag
      description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
    - name: imageRegistry
      description: TODO(#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
    - name: pathToProject
      description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
    - name: bucketName
      description: Use latest if it's a real release, otherwise the name of a test bucket you've made on GCS
      # For example, you may have made Buckets/tekton-releases/dashboard/mytestbucket for testing and then you'll get
      # lockdown.py, a folder called previous, and a folder called test-release if you run with
      # tkn pipeline start dashboard-release -p versionTag=$VERSION_TAG -r dashboard-source-repo=tekton-dashboard-git -r bucket=tekton-bucket-dashboard -r builtDashboardImage=dashboard-image -n $PIPELINE_NAMESPACE -s $SERVICE_ACCOUNT -p bucketName=test-release
      # mytestbucket is specified in resources.yaml as the location value for the storage bucket
  resources:
    inputs:
      - name: dashboard-source-repo
        type: git
        targetPath: go/src/github.com/tektoncd/dashboard
      - name: bucket-for-dashboard
        type: storage
    outputs:
      - name: bucket-for-dashboard
        type: storage
      - name: builtDashboardImage
        type: image
  steps:
    - name: link-input-bucket-to-output
      image: busybox
      command: ["cp"]
      args:
        - -r
        - "/workspace/bucket-for-dashboard"
        - "/workspace/output/"
    - name: ensure-release-dirs-exist
      image: busybox
      command: ["mkdir"]
      args:
        - "-p"
        - "/workspace/output/bucket-for-dashboard/$(params.bucketName)/"
        - "/workspace/output/bucket-for-dashboard/previous/"
    - name: dashboard-run-ko
      # TODO(#639) we should be able to use the image built by an upstream Task here instead of hardcoding
      # Want to use your own plumbing image? Change this
      image: gcr.io/tekton-releases/dogfooding/ko:gcloud-latest
      imagePullPolicy: Always
      env:
        - name: KO_DOCKER_REPO
          value: $(params.imageRegistry)
        - name: GOPATH
          value: /workspace/go
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/release.json
        - name: GO111MODULE
          value:
      command:
        - /bin/sh
      args:
        - -ce
        - |
          set -e
          set -x

          # Auth with CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          gcloud auth configure-docker

          # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
          export SOURCE_DATE_EPOCH=`date +%s`

          # Change to directory with our .ko.yaml
          cd /workspace/go/src/github.com/tektoncd/dashboard

          # Rewrite "devel" to params.versionTag
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/base/300-deployment.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/base/300-service.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/overlays/openshift-patches/dashboard-service.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/overlays/openshift-patches/internal-dashboard-service.yaml

          # Publish images and create release.yamls
          which ko # Tested with 0.2.0
          ko version
          kustomize version # Tested with 3.5.4

          kustomize build overlays/dev | ko resolve --preserve-import-paths -f - > /workspace/output/bucket-for-dashboard/$(params.bucketName)/tekton-dashboard-release.yaml
          kustomize build overlays/dev-locked-down --load_restrictor=LoadRestrictionsNone | ko resolve --preserve-import-paths -f - > /workspace/output/bucket-for-dashboard/$(params.bucketName)/tekton-dashboard-release-readonly.yaml
          kustomize build overlays/dev-openshift --load_restrictor=LoadRestrictionsNone | ko resolve --preserve-import-paths -f - > /workspace/output/bucket-for-dashboard/$(params.bucketName)/openshift-tekton-dashboard-release.yaml
          kustomize build overlays/dev-openshift-locked-down --load_restrictor=LoadRestrictionsNone | ko resolve --preserve-import-paths -f - > /workspace/output/bucket-for-dashboard/$(params.bucketName)/openshift-tekton-dashboard-release-readonly.yaml
      volumeMounts:
        - name: gcp-secret
          mountPath: /secret

    - name: copy-to-tagged-bucket
      image: busybox
      workingDir: "/workspace/output/bucket-for-dashboard"
      command:
        - /bin/sh
      args:
        - -ce
        - |
          set -x
          find .
          mkdir -p /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/
          cp /workspace/output/bucket-for-dashboard/$(params.bucketName)/tekton-dashboard-release.yaml /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/
          cp /workspace/output/bucket-for-dashboard/$(params.bucketName)/tekton-dashboard-release-readonly.yaml /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/
          cp /workspace/output/bucket-for-dashboard/$(params.bucketName)/openshift-tekton-dashboard-release.yaml /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/
          cp /workspace/output/bucket-for-dashboard/$(params.bucketName)/openshift-tekton-dashboard-release-readonly.yaml /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/

    - name: tag-external-images
      image: python
      workingDir: "/workspace/output/bucket-for-dashboard"
      command:
        - /bin/sh
      args:
        - -ce
        - |
          curl https://raw.githubusercontent.com/tektoncd/dashboard/master/tekton/scripts/lockdown.py --output lockdown.py
          chmod +x lockdown.py
          pip install docker
          ./lockdown.py --omit dashboard --path /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/tekton-dashboard-release.yaml
          ./lockdown.py --omit dashboard --path /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/tekton-dashboard-release-readonly.yaml
          ./lockdown.py --omit dashboard --path /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/openshift-tekton-dashboard-release.yaml
          ./lockdown.py --omit dashboard --path /workspace/output/bucket-for-dashboard/$(params.bucketName)/previous/$(params.versionTag)/openshift-tekton-dashboard-release-readonly.yaml
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock

    - name: tag-images
      image: google/cloud-sdk
      command:
        - /bin/bash
      volumeMounts:
        - name: gcp-secret
          mountPath: /secret
      args:
        - -ce
        - |
          set -e
          set -x

          curl https://raw.githubusercontent.com/tektoncd/pipeline/master/tekton/koparse/koparse.py --output /usr/bin/koparse.py
          chmod +x /usr/bin/koparse.py

          REGIONS=(us eu asia)
          IMAGES=(
            $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtDashboardImage.url)
          )
          # Parse the built images from the release.yaml generated by ko
          BUILT_IMAGES=( $(/usr/bin/koparse.py --path /workspace/output/bucket-for-dashboard/$(params.bucketName)/tekton-dashboard-release.yaml --base $(params.imageRegistry)/$(params.pathToProject) --images ${IMAGES[@]}) )

          # Auth with account credentials
          gcloud auth activate-service-account --key-file=/secret/release.json

          # Tag the images and put them in all the regions
          for IMAGE in "${BUILT_IMAGES[@]}"
          do
            IMAGE_WITHOUT_SHA=${IMAGE%%@*}
            gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(params.bucketName)
            gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(params.versionTag)
            for REGION in "${REGIONS[@]}"
            do
              for TAG in "$(params.bucketName)" $(params.versionTag)
              do
                gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
              done
            done
          done
  volumes:
    - name: gcp-secret
      secret:
        secretName: release-secret
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
