---
# yamllint disable rule:line-length
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-tekton-dashboard
spec:
  params:
    - name: versionTag
      description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
    - name: imageRegistry
      description: TODO(#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
    - name: pathToProject
      description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
    - name: releaseAsLatest
      description: Whether to tag and publish this release as the latest
      default: "true"
  resources:
    inputs:
      - name: dashboard-source-repo
        type: git
        targetPath: go/src/github.com/tektoncd/dashboard
      - name: bucket-for-dashboard
        type: storage
    outputs:
      - name: bucket-for-dashboard
        type: storage
      - name: builtDashboardImage
        type: image
  steps:
    - name: link-input-bucket-to-output
      image: busybox
      command: ["cp"]
      args:
        - -r
        - "/workspace/bucket-for-dashboard"
        - "/workspace/output/"
    - name: ensure-release-dirs-exist
      image: busybox
      command: ["mkdir"]
      args:
        - "-p"
        - "/workspace/output/bucket-for-dashboard/latest/"
        - "/workspace/output/bucket-for-dashboard/previous/$(params.versionTag)/"
    - name: dashboard-run-ko
      # TODO(#639) we should be able to use the image built by an upstream Task here instead of hardcoding
      # Want to use your own plumbing image? Change this
      image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
      imagePullPolicy: Always
      env:
        - name: KO_DOCKER_REPO
          value: $(params.imageRegistry)
        - name: GOPATH
          value: /workspace/go
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/release.json
        - name: GO111MODULE
          value:
      command:
        - /bin/sh
      args:
        - -ce
        - |
          set -e
          set -x

          # Activate service account
          gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}

          # Setup docker auth
          gcloud auth configure-docker

          # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
          export SOURCE_DATE_EPOCH=`date +%s`

          # Change to directory with our .ko.yaml
          cd /workspace/go/src/github.com/tektoncd/dashboard

          # Rewrite "devel" to params.versionTag
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/base/300-deployment.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/base/300-service.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/overlays/resources/openshift/internal-service.yaml

          # Publish images and create release.yamls
          which ko # Tested with 0.2.0
          ko version
          kustomize version # Tested with 3.5.4

          OUTPUT_BUCKET_RELEASE_DIR="/workspace/output/bucket-for-dashboard/previous/$(params.versionTag)"

          # add installer script in the release
          cp /workspace/go/src/github.com/tektoncd/dashboard/scripts/installer $OUTPUT_BUCKET_RELEASE_DIR/installer

          # build manifests for installer
          kustomize build overlays/installer/k8s/read-write --load_restrictor none        | ko resolve --preserve-import-paths -f - > $OUTPUT_BUCKET_RELEASE_DIR/installer-tekton-dashboard-release.yaml
          kustomize build overlays/installer/k8s/read-only  --load_restrictor none        | ko resolve --preserve-import-paths -f - > $OUTPUT_BUCKET_RELEASE_DIR/installer-tekton-dashboard-release-readonly.yaml
          kustomize build overlays/installer/openshift/read-write --load_restrictor none  | ko resolve --preserve-import-paths -f - > $OUTPUT_BUCKET_RELEASE_DIR/installer-openshift-tekton-dashboard-release.yaml
          kustomize build overlays/installer/openshift/read-only  --load_restrictor none  | ko resolve --preserve-import-paths -f - > $OUTPUT_BUCKET_RELEASE_DIR/installer-openshift-tekton-dashboard-release-readonly.yaml

          # build pre configured manifests
          ./scripts/installer release --debug                         --output $OUTPUT_BUCKET_RELEASE_DIR/tekton-dashboard-release.yaml
          ./scripts/installer release --debug --read-only             --output $OUTPUT_BUCKET_RELEASE_DIR/tekton-dashboard-release-readonly.yaml
          ./scripts/installer release --debug --openshift             --output $OUTPUT_BUCKET_RELEASE_DIR/openshift-tekton-dashboard-release.yaml
          ./scripts/installer release --debug --openshift --read-only --output $OUTPUT_BUCKET_RELEASE_DIR/openshift-tekton-dashboard-release-readonly.yaml
      volumeMounts:
        - name: gcp-secret
          mountPath: /secret

    - name: tag-external-images
      image: python
      workingDir: "/workspace/output/bucket-for-dashboard"
      command:
        - /bin/sh
      args:
        - -ce
        - |
          curl https://raw.githubusercontent.com/tektoncd/dashboard/master/tekton/scripts/lockdown.py --output lockdown.py
          chmod +x lockdown.py
          pip install docker
          OUTPUT_BUCKET_RELEASE_DIR="/workspace/output/bucket-for-dashboard/previous/$(params.versionTag)"

          for MANIFEST in $OUTPUT_BUCKET_RELEASE_DIR/*.yaml
          do
            ./lockdown.py --omit dashboard --path $MANIFEST
          done
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock

    - name: copy-to-latest-bucket
      image: busybox
      workingDir: "/workspace/output/bucket-for-dashboard"
      script: |
        #!/bin/sh
        set -ex
        find .
        if [[ "$(params.releaseAsLatest)" == "true" ]]
        then
          OUTPUT_BUCKET_RELEASE_DIR="/workspace/output/bucket-for-dashboard/previous/$(params.versionTag)"
          OUTPUT_BUCKET_LATEST_DIR="/workspace/output/bucket-for-dashboard/latest"
          cp $OUTPUT_BUCKET_RELEASE_DIR/* $OUTPUT_BUCKET_LATEST_DIR/
        fi

    - name: tag-images
      image: google/cloud-sdk
      command:
        - /bin/bash
      volumeMounts:
        - name: gcp-secret
          mountPath: /secret
      args:
        - -ce
        - |
          set -e
          set -x

          curl https://raw.githubusercontent.com/tektoncd/pipeline/master/tekton/koparse/koparse.py --output /usr/bin/koparse.py
          chmod +x /usr/bin/koparse.py

          REGIONS=(us eu asia)
          IMAGES=(
            $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtDashboardImage.url)
          )
          # Parse the built images from the release.yaml generated by ko
          BUILT_IMAGES=( $(/usr/bin/koparse.py --path /workspace/output/bucket-for-dashboard/latest/tekton-dashboard-release.yaml --base $(params.imageRegistry)/$(params.pathToProject) --images ${IMAGES[@]}) )

          # Auth with account credentials
          gcloud auth activate-service-account --key-file=/secret/release.json

          # Tag the images and put them in all the regions
          for IMAGE in "${BUILT_IMAGES[@]}"
          do
            IMAGE_WITHOUT_SHA=${IMAGE%%@*}
            if [[ "$(inputs.params.releaseAsLatest)" == "true" ]]
            then
              gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:latest
            fi
            gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(params.versionTag)
            for REGION in "${REGIONS[@]}"
            do
              if [[ "$(inputs.params.releaseAsLatest)" == "true" ]]
              then
                for TAG in "latest" $(params.versionTag)
                do
                  gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
                done
              else
                TAG="$(params.versionTag)"
                gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
              fi
            done
          done
  volumes:
    - name: gcp-secret
      secret:
        secretName: release-secret
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
