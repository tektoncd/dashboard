# yamllint disable rule:line-length
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: publish-tekton-dashboard
spec:
  inputs:
    resources:
      - name: source
        type: git
        targetPath: go/src/github.com/tektoncd/dashboard
      - name: bucket
        type: storage
    params:
      - name: versionTag
        description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
      - name: imageRegistry
        description: TODO(#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
      - name: pathToProject
        description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
  outputs:
    resources:
      - name: bucket
        type: storage
      - name: builtDashboardImage
        type: image
  steps:
    - name: link-input-bucket-to-output
      image: busybox
      command: ["cp"]
      args:
        - -r
        - "/workspace/bucket"
        - "/workspace/output/"
    - name: ensure-release-dirs-exist
      image: busybox
      command: ["mkdir"]
      args:
        - "-p"
        - "/workspace/output/bucket/latest/"
        - "/workspace/output/bucket/previous/"
    - name: dashboard-run-ko
      # TODO(#639) we should be able to use the image built by an upstream Task here instead of hardcoding
      image: gcr.io/tekton-nightly/ko-ci
      env:
        - name: KO_DOCKER_REPO
          value: $(inputs.params.imageRegistry)
        - name: GOPATH
          value: /workspace/go
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/release.json
      command:
        - /bin/sh
      args:
        - -ce
        - |
          set -e
          set -x

          # Auth with CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          gcloud auth configure-docker

          # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
          export SOURCE_DATE_EPOCH=`date +%s`

          # Change to directory with our .ko.yaml
          cd /workspace/go/src/github.com/tektoncd/dashboard

          # Publish images and create release.yamls
          ko resolve --preserve-import-paths -t $(inputs.params.versionTag) -f /workspace/go/src/github.com/tektoncd/dashboard/config/openshift > /workspace/output/bucket/latest/openshift-tekton-dashboard-release.yaml
          ko resolve --preserve-import-paths -t $(inputs.params.versionTag) -f /workspace/go/src/github.com/tektoncd/dashboard/config/ > /workspace/output/bucket/latest/release.yaml

        volumeMounts:
          - name: gcp-secret
            mountPath: /secret

      - name: copy-to-tagged-bucket
        image: busybox
        workingDir: "/workspace/output/bucket"
        command:
          - /bin/sh
        args:
          - -ce
          - |
            mkdir -p /workspace/output/bucket/previous/$(inputs.params.versionTag)/
            cp /workspace/output/bucket/latest/release.yaml /workspace/output/bucket/previous/$(inputs.params.versionTag)/
            cp /workspace/output/bucket/latest/openshift-tekton-dashboard-release.yaml /workspace/output/bucket/previous/$(inputs.params.versionTag)/

      - name: tag-external-images
        image: python
        workingDir: "/workspace/output/bucket"
        command:
          - /bin/sh
        args:
          - -ce
          - |
            curl https://raw.githubusercontent.com/tektoncd/dashboard/master/tekton/scripts/lockdown.py --output lockdown.py
            chmod +x lockdown.py
            pip install docker
            ./lockdown.py --omit dashboard --path /workspace/output/bucket/previous/$(inputs.params.versionTag)/release.yaml
            ./lockdown.py --omit dashboard --path /workspace/output/bucket/previous/$(inputs.params.versionTag)/openshift-tekton-dashboard-release.yaml
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock

      - name: tag-images
        image: google/cloud-sdk
        command:
          - /bin/bash
        args:
          - -ce
          - |
            set -e
            set -x

          curl https://raw.githubusercontent.com/tektoncd/pipeline/master/tekton/koparse/koparse.py --output /usr/bin/koparse.py
          chmod +x /usr/bin/koparse.py

          REGIONS=(us eu asia)
          IMAGES=(
            $(inputs.params.imageRegistry)/$(inputs.params.pathToProject)/$(outputs.resources.builtDashboardImage.url)
          )
          # Parse the built images from the release.yaml generated by ko
          BUILT_IMAGES=( $(/usr/bin/koparse.py --path /workspace/output/bucket/latest/release.yaml --base $(inputs.params.imageRegistry)/$(inputs.params.pathToProject) --images ${IMAGES[@]}) )

          # Auth with account credentials
          gcloud auth activate-service-account --key-file=/secret/release.json

          # Tag the images and put them in all the regions
          for IMAGE in "${BUILT_IMAGES[@]}"
          do
            IMAGE_WITHOUT_SHA=${IMAGE%%@*}
            gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:latest
            gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(inputs.params.versionTag)
            for REGION in "${REGIONS[@]}"
            do
              for TAG in "latest" $(inputs.params.versionTag)
              do
                gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
              done
            done
          done
        volumeMounts:
          - name: gcp-secret
            mountPath: /secret

      volumes:
        - name: gcp-secret
          secret:
            secretName: release-secret
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
            type: Socket
