apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: dashboard-prerelease-checks
spec:
  params:
  - name: package
    description: package to release
    default: github.com/tektoncd/dashboard
  - name: versionTag
    description: The X.Y.Z version that the artifacts would be tagged with
  - name: releaseBucket
    description: >-
      The bucket where to look for the release, in the format gs://<bucket-name>/<project-name>
  workspaces:
    - name: source-to-release
      description: The workspace where the repo has been cloned
  steps:
    - name: check-git-tag
      image: alpine/git
      script: |
        echo "Checking git tag"
        # Look for the tag in the list of tags
        git ls-remote --tags https://$(params.package) | \
          grep "$(params.versionTag)$" || exit 0
        # If the version was found fail
        echo "Version $(params.versionTag) already tagged for $(params.package)"
        exit 1
    - name: check-release-file
      image: gcr.io/google.com/cloudsdktool/cloud-sdk:310.0.0@sha256:cb03669fcdb9191d55a6200f2911fff3baec0b8c39b156d95b68aabe975ac506
      script: |
        echo "Checking release file"
        # Check if the release file already exists
        # gsutil retuns 1 if the object was not found
        if gsutil stat $(params.releaseBucket)/previous/$(params.versionTag)/tekton-dashboard-release.yaml; then
          echo "Release file already exists for $(params.versionTag) in the release bucket,"
          echo "but no git tag was found. To continue remove the release file first."
          exit 1
        fi
    - name: check-github-release
      image: python:3.6-alpine3.9
      script: |
        echo "Checking GitHub release"
        PACKAGE=$(echo $(params.package) | cut -d/ -f2,3)
        # Check if the release exists on GitHub
        wget -q -O- --header 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/${PACKAGE}/releases | \
          python -c 'import sys; import json; print("\n".join([x["tag_name"] for x in json.load(sys.stdin)]))' | \
          grep "$(params.versionTag)$" || exit 0
        echo "Release $(params.versionTag) already exists for $(params.package)"
        exit 1
    - name: success-confirmation
      image: alpine
      script: |
        echo "All pre-release checks for $(params.package) @ $(params.versionTag) were successful"
        echo "Happy releasing ðŸ˜º"
